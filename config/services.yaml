# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    locale: 'en'

services:
    _instanceof:
        Sylius\Component\Resource\Repository\RepositoryInterface:
            tags: ['sylius.repository']
        Sylius\Component\Resource\State\ProcessorInterface:
            tags: ['sylius.state_processor']
        Sylius\Component\Resource\State\ProviderInterface:
            tags: ['sylius.state_provider']
        Sylius\Component\Resource\State\ResponderInterface:
            tags: ['sylius.state_responder']

    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    app.repository.book:
        class: App\Repository\BookRepository

    Sylius\Component\Resource\Context\Initiator\RequestContextInitiator: null

    Sylius\Component\Resource\Metadata\Operation\HttpOperationInitiator: null

    Sylius\Component\Resource\State\Processor:
        $locator: !tagged_locator { tag: 'sylius.state_processor' }
    Sylius\Component\Resource\State\ProcessorInterface: '@Sylius\Component\Resource\State\Processor'

    Sylius\Component\Resource\State\Provider:
        $locator: !tagged_locator { tag: 'sylius.state_provider' }
    Sylius\Component\Resource\State\ProviderInterface: '@Sylius\Component\Resource\State\Provider'

    Sylius\Component\Resource\State\Responder:
        $locator: !tagged_locator { tag: 'sylius.state_responder' }
    Sylius\Component\Resource\State\ResponderInterface: '@Sylius\Component\Resource\State\Responder'

    Sylius\Component\Resource\Symfony\EventListener\ReadListener:
        tags: [{ name: 'kernel.event_listener', event: 'kernel.request', priority: 4 }]

    Sylius\Component\Resource\Symfony\EventListener\FormListener:
        tags: [ { name: 'kernel.event_listener', event: 'kernel.view', priority: 128 } ]

    Sylius\Component\Resource\Symfony\EventListener\WriteListener:
        tags: [ { name: 'kernel.event_listener', event: 'kernel.view', priority: 32 } ]

    Sylius\Component\Resource\Symfony\EventListener\RespondListener:
        tags: [{ name: 'kernel.event_listener', event: 'kernel.view', priority: 8 }]

    Sylius\Component\Resource\Symfony\Form\Factory\FormFactory: null
    Sylius\Component\Resource\Symfony\Form\Factory\FormFactoryInterface: '@Sylius\Component\Resource\Symfony\Form\Factory\FormFactory'

    Sylius\Component\Resource\Symfony\Request\RepositoryArgumentResolver: null

    Sylius\Component\Resource\Symfony\Request\State\Provider:
        arguments:
            $locator: !tagged_locator { tag: 'sylius.repository' }

    Sylius\Component\Resource\Doctrine\Common\PersistProcessor: null
    Sylius\Component\Resource\Doctrine\Common\RemoveProcessor: null

    Sylius\Component\Resource\Doctrine\Common\Metadata\Resource\Factory\DoctrineResourceMetadataCollectionFactory:
        decorates: 'sylius.resource_metadata_collection.factory.attributes'
        arguments:
            $decorated: '@.inner'
